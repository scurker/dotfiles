[push]

  default = simple

[user]

  name = Jason
  email = jason@scurker.com

[includeIf "gitdir:~/projects/work/"]

  path = ~/.dotfiles/git/gitconfig-work

[alias]

  # Undo the previous commit
  undo-commit = reset --soft HEAD^

  # View abbreviated SHA, description, and committer - highlighting the ticket number and branch
  ls = "!f() { git log --pretty=format:'%C(yellow)%h%Creset %s %C(cyan)(%cr)%Creset %Cgreen<%cn>%Creset' --author=$1 | GREP_COLOR='0;35' egrep -i --color=always '((\\w+/)?(cam)-[0-9]+)|$' | less -R; }; f"
  last = "!f() { git log --pretty=format:'%C(yellow)%h%Creset %s %C(cyan)(%cr)%Creset %Cgreen<%cn>%Creset' -1 --author=$1 | GREP_COLOR='0;35' egrep -i --color=always '((\\w+/)?(cam)-[0-9]+)|$'; }; f"

  # View the most recent tag
  last-tag = "!f() { git describe --tags --abbrev=0 $1; }; f"

  # Changelog since hash/tag
  changelog = "!f() { git log --pretty=format:'%C(yellow)%h%Creset %s %C(cyan)(%cr)%Creset %Cgreen<%cn>%Creset' --no-merges $1...; }; f"

  # Clean all files
  ca = clean -d -f

  # Amend the last commit
  amend = commit -a --amend

  # Show verbose remote info
  remotes = remote -v

  # List contributors with number of commits
  contributors = shortlog --summary --numbered --no-merges

  # Clean remote branches that have already been merged
  clean-branches = "!git branch --color=never --merged | grep -v '\\*' | grep -v master | xargs -n 1 git branch -d"
  rm-branches = "!git branch -vv | grep 'origin/.*: gone' | awk '{print $1}' | xargs -n 1 git branch -d"

  # Checkout remote pull requests for local testing
  checkout-pr = "!f() { git fetch origin pull/$1/head:pr/$1; }; f"

  # Show list of branches
  branches = "!f() { git checkout $(git for-each-ref --sort='-authordate:iso8601' --format=' %(if)%(HEAD)%(then)%(color:green)*%(color:reset)%(else) %(end) %(authordate:relative)%09%(color:yellow)%(refname:short)' refs/heads | pick | cut -f2); }; f"

  # Interactive delete branches
  branches-delete = "!f() { git branch -D $(git for-each-ref --sort='-authordate:iso8601' --format=' %(if)%(HEAD)%(then)%(color:green)*%(color:reset)%(else) %(end) %(authordate:relative)%09%(color:yellow)%(refname:short)' refs/heads | pick | cut -f2); }; f"

  # Alias for setting upstream
  set-upstream = "!f() { git branch --set-upstream-to=origin/$1 $1; }; f"

  # Fixup into the most recent commit
  fixup = "!f() { git commit --fixup $(git rev-parse HEAD); }; f"

  # Squash into the most recent commit
  squash = "!f() { git commit --squash $(git rev-parse HEAD); }; f"

  # Autosquash
  autosquash = "!f() { git rebase --interactive --autosquash $1~1; }; f"

  # Show word diffs
  word-diff = "diff --word-diff"

  # Unstage staged files
  unstage = reset HEAD --

[color "status"]

  added = green
  changed = yellow
  untracked = red

[push]

  default = current
  autoSetupRemote = true

[filter "lfs"]

  clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
  required = true

[color]

  ui = always

[core]

  excludesfile = ~/.gitignore

[init]

  defaultBranch = main
