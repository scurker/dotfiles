#!/bin/bash

cwd="${pwd}"

DOTFILES_DIR="${HOME}/.dotfiles"
DOTFILES_GIT="git@github.com:scurker/dotfiles.git"
DOTFILES_TAR="https://github.com/scurker/dotfiles/tarball/master"

STATUS_COLOR=$(tput setaf 3)
SUCCESS_COLOR=$(tput setaf 2)
CHECKMARK="${SUCCESS_COLOR}âœ“${RESET}"
RESET="\e[0m"

printf "Installing dotfiles\n"

# If the dotfiles directory is missing, download it
if [[ ! -d ${DOTFILES_DIR} ]]; then
  printf "${STATUS_COLOR}Downloading dotfiles... ${CHECKMARK}${RESET}\n"
  mkdir ${DOTFILES_DIR}
  # Get the tarball
  curl -fsSLo ${HOME}/dotfiles.tar.gz ${DOTFILES_TAR}
  # Extract to the dotfiles directory
  tar -zxf ${HOME}/dotfiles.tar.gz --strip-components 1 -C ${DOTFILES_DIR}
  # Remove the tarball
  rm -rf ${HOME}/dotfiles.tar.gz
fi

cd ${DOTFILES_DIR}

source ./shell/.colors
source ${HOME}/.dotfiles/lib/utils

# homebrew
if ! type_exists 'brew'; then
  printf "${STATUS_COLOR}Installing homebrew... ${CHECKMARK}${RESET}\n"
  ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
fi

brew update > /dev/null &
spinner "${STATUS_COLOR}Updating brew...${RESET}"

# git
if ! type_exists 'git'; then
  printf "${STATUS_COLOR}Installing git... ${CHECKMARK}${RESET}\n"
  brew install git
fi

# Initialize the git repo if it doesn't exist
if ! git rev-parse --git-dir > /dev/null 2>&1; then
  printf "${STATUS_COLOR}Initializing git repository... ${CHECKMARK}${RESET}\n"
  git init --quiet
  git remote add origin ${DOTFILES_GIT}
  git fetch origin master > /dev/null 2>&1
  # Reset the index and the working try to the fetched HEAD
  git reset --hard HEAD > /dev/null 2>&1
  git clean -df
fi

# Sync with the remote repo
printf "${STATUS_COLOR}Syncing dotfiles... ${CHECKMARK}${RESET}\n"
git pull --rebase origin master > /dev/null 2>&1
git log -1 --pretty=format:'%C(white dim)[master]%Creset %C(yellow)%h%Creset %s %C(cyan)(%cr)%Creset %Cgreen<%cn>%Creset'

# npm
if ! type_exists 'npm'; then
  brew install node &
  spinner "${STATUS_COLOR}Installing node...${RESET}"
fi

ask "\nWarning: This step may overwrite your existing dotfiles!"
if is_confirmed; then
  ln "shell/.bashrc"        "${HOME}/.bashrc"
  ln "shell/.bash_profile"  "${HOME}/.bash_profile"
  ln "git/.gitignore"       "${HOME}/.gitignore"
  ln "git/.gitconfig"       "${HOME}/.gitconfig"
  source ${HOME}/.bash_profile
else
  printf "Skipped linking dotfiles\n"
fi